#!/usr/bin/env php
<?php
/**
 * @copyright Copyright (c) 2014,2019 Carsten Brandt
 * @license https://github.com/cebe/indent/blob/master/LICENSE
 * @link https://github.com/cebe/indent#readme
 */

// Send all errors to stderr
ini_set('display_errors', 'stderr');

$src = [];
$targetIndent = false;
$recursive = false;
$pattern = '*.php';
$tabstop = 4;
foreach($argv as $k => $arg) {
	if ($k == 0) {
		continue;
	}
	if ($arg[0] == '-') {
		$arg = explode('=', $arg);
		switch($arg[0]) {
			case '-r':
				$recursive = true;
			break;
			case '--pattern':
				$pattern = $arg[1];
			break;
			case '--spaces':
				$targetIndent = 'spaces';
			break;
			case '--tabs':
				$targetIndent = 'tabs';
			break;
			case '--tabstop':
				if (!is_numeric($arg[1]) || $arg[1] < 1) {
					error('Invalid value for ' . $arg[0], 'usage');
				}
				$tabstop = (int)$arg[1];
			break;
			case '-h':
			case '--help':
				echo "Indentation converter\n";
				echo "---------------------\n\n";
				echo "by Carsten Brandt <mail@cebe.cc>\n\n";
				usage();
			break;
			default:
				error('Unknown argument ' . $arg[0], 'usage');
		}
	} else {
		$src[] = $arg;
	}
}

if ($targetIndent === false) {
	error('indentation flag --tabs or --spaces is missing.', 'usage');
}

if (empty($src)) {
	echo convertIndent(file_get_contents("php://stdin"), $targetIndent, $tabstop);
} elseif ($recursive) {
	$pattern = '/^' . implode('(.*)', array_map('preg_quote', explode('*', $pattern))) . '$/i';
	foreach ($src as $dir) {
		if (is_file($dir)) {
			convertIndentFile($dir, $targetIndent, $tabstop);
		} elseif (is_dir($dir)) {
			convertIndentDir($dir, $pattern, $targetIndent, $tabstop);
		} else {
			error("File or directory does not exist: $dir");
		}
	}
} elseif (count($src) == 1) {
	$file = reset($src);
	if (!file_exists($file)) {
		error("File does not exist: $file");
	} elseif (!is_file($file)) {
		error("Argument is not a file: $file\nDid you forget the -r option?");
	}
	convertIndentFile($file, $targetIndent, $tabstop);
} else {
	foreach($src as $file) {
		convertIndentFile($file, $targetIndent, $tabstop);
	}
}

// functions

/**
 * Display usage information
 */
function usage() {
	global $argv;
	$cmd = $argv[0];
	echo <<<EOF
Usage:
    $cmd [--tabs|--spaces] [-r [--pattern=...]] [files or directories...]

    --tabs       convert all indentation to tabs. Assuming 4 spaces tab length.
    --spaces     convert all indentation to spaces.

    -r           recursively go over all directories given as argument and convert
                 files that match --pattern.

    --pattern    the pattern to match files for when using -r. Defaults to '*.php'.

    --tabstop=N  define number of spaces N to replace a tab with. Defaults to 4.

    --help       shows this usage information.

    If no file is specified input will be read from STDIN.

Examples:

    Convert all *.php files in dir to tabs:

        $cmd --tabs -r dir

    Convert all *.md files in dir to spaces:

        $cmd --spaces --pattern=*.md -r dir

    Convert STDIN, which is the content of myfile.php to spaces and print the result to STDOUT:

        cat myfile.php | $cmd --spaces

EOF;
	exit(1);
}

/**
 * Send custom error message to stderr
 * @param $message string
 * @param $callback mixed called before script exit
 * @return void
 */
function error($message, $callback = null, $exit = true) {
	$fe = fopen("php://stderr", "w");
	fwrite($fe, "Error: $message\n");

	if (is_callable($callback)) {
		call_user_func($callback);
	}

	if ($exit) {
		exit(1);
	}
}

function convertIndentFile($file, $target, $tabstop)
{
	if (!file_exists($file)) {
		error("File does not exist: $file", null, false);
	}
	if (($content = file_get_contents($file)) !== false) {
		file_put_contents($file, convertIndent($content, $target, $tabstop));
	} else {
		error("Error reading file: $file", null, false);
	}
}

function convertIndentDir($dir, $pattern, $target, $tabstop)
{
	$dh = opendir($dir);
	while($entry = readdir($dh)) {
		if ($entry == '.' || $entry == '..') {
			continue;
		}
		$path = $dir . '/' . $entry;
		if (is_file($path) && preg_match($pattern, $entry)) {
			convertIndentFile($path, $target, $tabstop);
		} elseif (is_dir($path)) {
			convertIndentDir($path, $pattern, $target, $tabstop);
		}
	}
}

function convertIndent($content, $target, $tabstop)
{
	$spaces = str_repeat(' ', $tabstop);
	$lines = preg_split('/(\R)/', $content);
	foreach($lines as $i => $line) {
		if (preg_match('/^\s+/', $line, $matches)) {
			switch($target) {
				case 'spaces':
					$line = str_replace("\t", $spaces, $matches[0]) . substr($line, strlen($matches[0]));
				break;
				case 'tabs':
					$line = str_replace($spaces, "\t", $matches[0]) . substr($line, strlen($matches[0]));
				break;
			}
			$lines[$i] = $line;
		}
	}
	return implode(PHP_EOL, $lines);
}
